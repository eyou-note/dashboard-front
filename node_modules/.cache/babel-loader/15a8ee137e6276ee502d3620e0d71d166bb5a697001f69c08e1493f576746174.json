{"ast":null,"code":"var _jsxFileName = \"/Users/eoz/study/std-notification-dashboard-frontend/src/Components/transaction/TransactionStepper.js\";\nimport * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport { ColorlibConnector, ColorlibStepIcon } from \"./style/Icon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STEPS = [\"request push\", \"std-notification\", \"ccs-notification\"];\nconst data = {\n  status: \"success\",\n  activeStep: 1,\n  data: [{}]\n};\nfunction getStepIcon(data) {}\n\n//응답값이 넘어온다.\n//응답을 분석해서 아이콘을 생성한다.\nexport default function TransactionStepper() {\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    sx: {\n      width: \"100%\"\n    },\n    spacing: 4,\n    children: /*#__PURE__*/_jsxDEV(Stepper, {\n      alternativeLabel: true,\n      activeStep: 1,\n      connector: /*#__PURE__*/_jsxDEV(ColorlibConnector, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 65\n      }, this),\n      children: STEPS.map((label, i) => {\n        const labelProps = {};\n        if (i === 1) {\n          labelProps.error = true;\n        }\n        return /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            ...labelProps,\n            StepIconComponent: ColorlibStepIcon,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }, this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_c = TransactionStepper;\nvar _c;\n$RefreshReg$(_c, \"TransactionStepper\");","map":{"version":3,"names":["React","Stack","Stepper","Step","StepLabel","ColorlibConnector","ColorlibStepIcon","jsxDEV","_jsxDEV","STEPS","data","status","activeStep","getStepIcon","TransactionStepper","sx","width","spacing","children","alternativeLabel","connector","fileName","_jsxFileName","lineNumber","columnNumber","map","label","i","labelProps","error","StepIconComponent","_c","$RefreshReg$"],"sources":["/Users/eoz/study/std-notification-dashboard-frontend/src/Components/transaction/TransactionStepper.js"],"sourcesContent":["import * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport { ColorlibConnector, ColorlibStepIcon } from \"./style/Icon\";\n\nconst STEPS = [\"request push\", \"std-notification\", \"ccs-notification\"];\nconst data = {\n    status: \"success\",\n    activeStep: 1,\n    data: [{}],\n};\n\nfunction getStepIcon(data) {}\n\n//응답값이 넘어온다.\n//응답을 분석해서 아이콘을 생성한다.\nexport default function TransactionStepper() {\n    return (\n        <Stack sx={{ width: \"100%\" }} spacing={4}>\n            <Stepper alternativeLabel activeStep={1} connector={<ColorlibConnector />}>\n                {STEPS.map((label, i) => {\n                    const labelProps = {};\n                    if (i === 1) {\n                        labelProps.error = true;\n                    }\n\n                    return (\n                        <Step key={label}>\n                            <StepLabel {...labelProps} StepIconComponent={ColorlibStepIcon}>\n                                {label}\n                            </StepLabel>\n                        </Step>\n                    );\n                })}\n            </Stepper>\n        </Stack>\n    );\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,KAAK,GAAG,CAAC,cAAc,EAAE,kBAAkB,EAAE,kBAAkB,CAAC;AACtE,MAAMC,IAAI,GAAG;EACTC,MAAM,EAAE,SAAS;EACjBC,UAAU,EAAE,CAAC;EACbF,IAAI,EAAE,CAAC,CAAC,CAAC;AACb,CAAC;AAED,SAASG,WAAWA,CAACH,IAAI,EAAE,CAAC;;AAE5B;AACA;AACA,eAAe,SAASI,kBAAkBA,CAAA,EAAG;EACzC,oBACIN,OAAA,CAACP,KAAK;IAACc,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAO,CAAE;IAACC,OAAO,EAAE,CAAE;IAAAC,QAAA,eACrCV,OAAA,CAACN,OAAO;MAACiB,gBAAgB;MAACP,UAAU,EAAE,CAAE;MAACQ,SAAS,eAAEZ,OAAA,CAACH,iBAAiB;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAAAN,QAAA,EACrET,KAAK,CAACgB,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAK;QACrB,MAAMC,UAAU,GAAG,CAAC,CAAC;QACrB,IAAID,CAAC,KAAK,CAAC,EAAE;UACTC,UAAU,CAACC,KAAK,GAAG,IAAI;QAC3B;QAEA,oBACIrB,OAAA,CAACL,IAAI;UAAAe,QAAA,eACDV,OAAA,CAACJ,SAAS;YAAA,GAAKwB,UAAU;YAAEE,iBAAiB,EAAExB,gBAAiB;YAAAY,QAAA,EAC1DQ;UAAK;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC;QAAC,GAHLE,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CAAC;MAEf,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEhB;AAACO,EAAA,GArBuBjB,kBAAkB;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}