{"ast":null,"code":"var _jsxFileName = \"/Users/eoz/study/std-notification-dashboard-frontend/src/Components/transaction/TransactionResult.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TransactionStepper from \"./TransactionStepper\";\nimport TransactionLog from \"./TransactionLog\";\nimport Box from \"@mui/material/Box\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst data = {\n  status: \"SUCCESS\",\n  activeStep: 1,\n  steps: [{\n    status: \"SUCCESS\",\n    phase: 0,\n    transactionLog: \"PHASE 0 Transaction Log..\"\n  }, {\n    status: \"SUCCESS\",\n    phase: 1,\n    transactionLog: \"PHASE 1 Transaction Log..\"\n  }, {\n    status: \"DISABLED\",\n    phase: 2,\n    transactionLog: \"PHASE 2 Transaction Log..\"\n  }]\n};\nexport default function TransactionResult() {\n  _s();\n  const [data, setData] = useState(null); // 데이터를 저장할 state\n  const [loading, setLoading] = useState(true); // 로딩 상태를 저장할 state\n  const [error, setError] = useState(null); // 오류를 저장할 state\n\n  useEffect(() => {\n    // 컴포넌트가 처음 마운트될 때 실행되는 useEffect\n    axios.get(\"http://localhost:8080\").then(response => {\n      setData(response.data); // 성공적으로 데이터를 가져오면 state에 저장\n      setLoading(false); // 로딩 상태를 false로 설정\n    }).catch(err => {\n      setError(err); // 오류가 발생하면 오류를 state에 저장\n      setLoading(false); // 로딩 상태를 false로 설정\n    });\n  }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행되도록 설정\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 25\n  }, this); // 로딩 중일 때 표시할 UI\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 23\n  }, this); // 오류가 발생했을 때 표시할 UI\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: data && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TransactionStepper, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TransactionLog, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(TransactionResult, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\n_c = TransactionResult;\nvar _c;\n$RefreshReg$(_c, \"TransactionResult\");","map":{"version":3,"names":["React","useState","useEffect","TransactionStepper","TransactionLog","Box","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","data","status","activeStep","steps","phase","transactionLog","TransactionResult","_s","setData","loading","setLoading","error","setError","get","then","response","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["/Users/eoz/study/std-notification-dashboard-frontend/src/Components/transaction/TransactionResult.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TransactionStepper from \"./TransactionStepper\";\nimport TransactionLog from \"./TransactionLog\";\nimport Box from \"@mui/material/Box\";\nimport axios from \"axios\";\n\nconst data = {\n    status: \"SUCCESS\",\n    activeStep: 1,\n    steps: [\n        {\n            status: \"SUCCESS\",\n            phase: 0,\n            transactionLog: \"PHASE 0 Transaction Log..\",\n        },\n        {\n            status: \"SUCCESS\",\n            phase: 1,\n            transactionLog: \"PHASE 1 Transaction Log..\",\n        },\n        {\n            status: \"DISABLED\",\n            phase: 2,\n            transactionLog: \"PHASE 2 Transaction Log..\",\n        },\n    ],\n};\n\nexport default function TransactionResult() {\n    const [data, setData] = useState(null); // 데이터를 저장할 state\n    const [loading, setLoading] = useState(true); // 로딩 상태를 저장할 state\n    const [error, setError] = useState(null); // 오류를 저장할 state\n\n    useEffect(() => {\n        // 컴포넌트가 처음 마운트될 때 실행되는 useEffect\n        axios\n            .get(\"http://localhost:8080\")\n            .then(response => {\n                setData(response.data); // 성공적으로 데이터를 가져오면 state에 저장\n                setLoading(false); // 로딩 상태를 false로 설정\n            })\n            .catch(err => {\n                setError(err); // 오류가 발생하면 오류를 state에 저장\n                setLoading(false); // 로딩 상태를 false로 설정\n            });\n    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행되도록 설정\n\n    if (loading) return <div>Loading...</div>; // 로딩 중일 때 표시할 UI\n    if (error) return <div>Error: {error.message}</div>; // 오류가 발생했을 때 표시할 UI\n    return (\n        <Box>\n            {data && (\n                <>\n                    <TransactionStepper data={data} />\n                    <TransactionLog data={data} />\n                </>\n            )}\n        </Box>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,IAAI,GAAG;EACTC,MAAM,EAAE,SAAS;EACjBC,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,CACH;IACIF,MAAM,EAAE,SAAS;IACjBG,KAAK,EAAE,CAAC;IACRC,cAAc,EAAE;EACpB,CAAC,EACD;IACIJ,MAAM,EAAE,SAAS;IACjBG,KAAK,EAAE,CAAC;IACRC,cAAc,EAAE;EACpB,CAAC,EACD;IACIJ,MAAM,EAAE,UAAU;IAClBG,KAAK,EAAE,CAAC;IACRC,cAAc,EAAE;EACpB,CAAC;AAET,CAAC;AAED,eAAe,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAM,CAACP,IAAI,EAAEQ,OAAO,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACZ;IACAI,KAAK,CACAkB,GAAG,CAAC,uBAAuB,CAAC,CAC5BC,IAAI,CAACC,QAAQ,IAAI;MACdP,OAAO,CAACO,QAAQ,CAACf,IAAI,CAAC,CAAC,CAAC;MACxBU,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CACDM,KAAK,CAACC,GAAG,IAAI;MACVL,QAAQ,CAACK,GAAG,CAAC,CAAC,CAAC;MACfP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAID,OAAO,EAAE,oBAAOZ,OAAA;IAAAqB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,CAAC,CAAC;EAC3C,IAAIX,KAAK,EAAE,oBAAOd,OAAA;IAAAqB,QAAA,GAAK,SAAO,EAACP,KAAK,CAACY,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC,CAAC,CAAC;EACrD,oBACIzB,OAAA,CAACH,GAAG;IAAAwB,QAAA,EACClB,IAAI,iBACDH,OAAA,CAAAE,SAAA;MAAAmB,QAAA,gBACIrB,OAAA,CAACL,kBAAkB;QAACQ,IAAI,EAAEA;MAAK;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClCzB,OAAA,CAACJ,cAAc;QAACO,IAAI,EAAEA;MAAK;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAChC;EACL;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACf,EAAA,CA/BuBD,iBAAiB;AAAAkB,EAAA,GAAjBlB,iBAAiB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}